# Next.js and Frontend
*.ts linguist-language=TypeScript
*.tsx linguist-language=TypeScript
*.js linguist-language=JavaScript
*.jsx linguist-language=JavaScript
*.css linguist-language=CSS

# Cairo/Dojo Smart Contracts (StarkNet)
*.cairo linguist-language=Cairo
Scarb.toml linguist-language=TOML
*.toml linguist-language=TOML
dojo_*.toml linguist-language=TOML
torii_*.toml linguist-language=TOML

# Build and Dependencies
target/ linguist-generated=true
target/ -diff
**/target/ linguist-generated=true
**/target/ -diff
.next/ linguist-generated=true
.next/ -diff
dist/ linguist-generated=true
dist/ -diff

# Dojo/StarkNet Build Artifacts
**/*.wasm linguist-generated=true
manifest*.json linguist-generated=true
Scarb.lock linguist-generated=true
bindings/ linguist-generated=true

# Documentation
*.md linguist-documentation
docs/ linguist-documentation
README.md linguist-documentation

# Test Files
*_test.cairo linguist-language=Cairo
*.test.ts linguist-language=TypeScript
*.test.tsx linguist-language=TypeScript
tests/ linguist-language=TypeScript
__tests__/ linguist-language=TypeScript

# IDE and Editor Files
.vscode/ linguist-vendored
.idea/ linguist-vendored
*.json linguist-language=JSON
.env.* linguist-language=Text

# Package Management
node_modules/ linguist-vendored
node_modules/ -diff
yarn.lock linguist-generated=true
package-lock.json linguist-generated=true

# Ignore binary files
*.wasm binary
*.jpg binary
*.png binary
*.gif binary
*.ico binary
*.pdf binary

# Configuration Files
*.config.js linguist-language=JavaScript
*.config.ts linguist-language=TypeScript
tailwind.config.js linguist-language=JavaScript
tailwind.config.ts linguist-language=TypeScript
next.config.js linguist-language=JavaScript
next.config.mjs linguist-language=JavaScript
postcss.config.js linguist-language=JavaScript
scaffold.config.ts linguist-language=TypeScript

# Database
*.sql linguist-language=SQL
prisma/ linguist-language=Prisma
drizzle/ linguist-language=TypeScript

# Security
.env.example linguist-language=Text

You are an expert developer in TypeScript, Node.js, Next.js 15 App Router, React, StarkNet, Cairo, Dojo, TailwindCSS, Radix UI, and Shadcn UI.

---

## Coding Philosophy
Our coding philosophy revolves around writing **semantic, idiomatic, functional, and declarative code**. Follow these key principles:

- **Modern JavaScript & TypeScript:**  
  Leverage the latest features for expressive, maintainable code with an emphasis on TypeScript's type safety.
- **Declarative React:**  
  Describe UI structure and state, avoiding imperative code.
- **Readable Naming:**  
  Use self-explanatory names for variables, functions, and components.
- **Single Responsibility Principle:**  
  Keep components focused and reusable.
- **Favor Composition Over Inheritance:**  
  Build components and functions that promote modularity and reusability.
- **File Organization:**  
  Structure code logically, keeping readability and scalability in mind.
- **Utility-First Styling:**  
  Use TailwindCSS for rapid and consistent UI development.

---

## General Conventions
- **Project Structure:**  
  - Organize components in a well-structured manner.
  - Separate concerns with clear folder structures.
  - Follow monorepo best practices (`packages/nextjs`, `packages/dojo-contracts`).

- **Filenames:**  
  - Use lowercase with dash separators (e.g., `tattoo-design.tsx`).
  - File extensions should indicate file types (e.g., `.config.ts`, `.test.ts`, `.hook.tsx`).

- **Exporting:**  
  - Prefer named exports over default exports.

---

## JavaScript/TypeScript Best Practices
- **Naming Variables:**  
  - Use meaningful names that reflect purpose.
  - Prefix booleans with auxiliary verbs (e.g., `isLoading`, `hasPermission`).

- **Functional Programming:**  
  - Prefer `function` declarations for components.
  - Use the RORO (Receive an Object, Return an Object) pattern.

- **TypeScript Usage:**  
  - Use `interface` for objects and class definitions.
  - Use `type` for unions, tuples, and aliases.
  - Avoid `any`; prefer explicit types and inference when possible.
  - Use `as` for type assertions when necessary.
  - Explicitly annotate function parameters and return types.

---

## React/Next.js Conventions
- **Component Declaration Order:**
  1. Imports
  2. Component declaration
  3. Styled components (if any)
  4. TypeScript types and interfaces

- **Component Structure:**
  - Small, focused components following single responsibility.
  - Use hooks for state management; avoid unnecessary re-renders.
  - Follow the `use client` directive judiciously.

- **State Management & Fetching:**
  - Prefer React Server Components (RSC) for data-heavy operations.
  - Use `next-safe-action` for secure server actions.
  - Use StarkNet.js for blockchain interactions.

- **Performance Optimization:**
  - Lazy load non-critical components.
  - Use Suspense with fallbacks for client-side components.
  - Optimize image loading with `next/image`.

---

## StarkNet/Cairo Development
- **Smart Contract Structure:**
  - Follow Cairo best practices for memory management and gas optimization.
  - Leverage Dojo's entity component system for game-like interactions.
  - Write clear comments explaining complex contract logic.

- **Testing:**
  - Write comprehensive tests for all contract functionality.
  - Test edge cases and failure modes thoroughly.
  - Use appropriate test fixtures and mocks.

- **Security:**
  - Follow StarkNet security best practices.
  - Validate all inputs and handle edge cases.
  - Consider reentrancy and other attack vectors.

---

## Inkfinity-Specific Patterns
- **NFT Design Registry:**
  - Implement ERC-721 standards for tattoo design ownership.
  - Ensure proper metadata handling for design attributes.
  - Build efficient indexing for design discovery.

- **Smart Contract Bookings:**
  - Create robust escrow mechanisms for deposits.
  - Implement clear state transitions for booking lifecycle.
  - Handle cancellation policies and refunds properly.

- **Stablecoin Integration:**
  - Support USDC for all platform transactions.
  - Implement proper decimal handling for currency amounts.
  - Include safeguards against transaction failures.

---

## Naming Conventions
- **Booleans:** Prefix with `does`, `has`, `is`, `should` (e.g., `isVerified`, `hasDeposit`).
- **Files:** Use lowercase with dash separators (e.g., `tattoo-detail.tsx`).
- **Extensions:** Follow the convention:
  - `.config.ts` for configurations
  - `.test.ts` for tests
  - `.context.tsx` for context files
  - `.type.ts` for types
  - `.hook.ts` for hooks

---

## Styling with Tailwind CSS
- Follow utility-first principles.
- Use CVA (Class Variance Authority) for managing component variants.
- Maintain a mobile-first responsive approach.
- Adhere to Inkfinity's design system for colors, spacing, and typography.

---

## Testing Guidelines
- **Unit Tests:** Use Vitest for frontend utility functions and hooks.
- **Integration Tests:** Validate component interactions.
- **Contract Tests:** Ensure smart contract functionality works as expected.
- **End-to-End Tests:** Test complete user flows.
- Ensure code coverage meets project standards.

---

## Accessibility Guidelines
- Ensure all interactive elements are keyboard accessible.
- Use ARIA roles and attributes for screen readers.
- Maintain WCAG compliance for color contrast and readability.
- Provide alternative text for all images, especially tattoo designs.

---

## Documentation Standards
- Provide clear and concise comments for complex logic.
- Use JSDoc comments to improve IDE intellisense.
- Maintain up-to-date README files with setup instructions.
- Document contract interfaces and expected behaviors.
- Include diagrams for complex workflows like booking and payment processes.

---

## Key Conventions
1. Rely on Next.js App Router for routing and state changes.
2. Use StarkNet for all blockchain interactions.
3. Prioritize Web Vitals (LCP, CLS, FID) for performance.
4. Use a monorepo structure with frontend in `packages/nextjs` and contracts in `packages/dojo-contracts`.
5. Follow Dojo patterns for entity-component-system architecture.

---

## Security Practices
- Store sensitive data in environment variables.
- Validate all incoming API requests for security compliance.
- Implement proper authentication and authorization flows.
- Set security headers (CSP, HSTS, etc.) using Next.js config.
- Implement rate limiting for API routes.
- Use prepared statements for database queries.
- Enable audit logging for sensitive operations.
- Implement session management best practices.
- Regular security dependency updates.
- Properly sanitize and validate smart contract inputs.

---

## Performance Optimization
- Minimize client-side dependencies.
- Use streaming and suspense features in Next.js.
- Leverage Incremental Static Regeneration (ISR) where applicable.
- Optimize bundle size using code splitting.
- Optimize StarkNet contract calls to reduce gas usage.

---

Refer to the official documentation for best practices in:
- **Next.js** (Data Fetching, Routing, Rendering)
- **StarkNet & Cairo** (Smart Contract Development)
- **Dojo** (Entity Component System)
- **TailwindCSS** (Styling)